# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:58:59+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class ArEVentilaO(BaseModel):
    Date: str
    Point: int
    Until: str


class DEPRECATEDDocumentRequest(BaseModel):
    field: Optional[str] = Field(
        None, description='This can be any JSON document field.'
    )


class DocumentRequest(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = Field(None, description='JSON document fields.')


class Listversion(BaseModel):
    date: str
    document: Optional[Dict[str, Any]] = None
    id: str


class Name(BaseModel):
    type: str


class Properties(BaseModel):
    name: Name


class PutindicesRequest(BaseModel):
    fields: str = Field(..., description='Comma-separted fields of the index')
    multiple: bool = Field(
        ...,
        description='Determines whether the values need to be unique. If false, values must be unique.',
    )
    name: str = Field(..., description='Name to identify the index')


class SaveschemabynameRequest(BaseModel):
    properties: Properties


class Scores(BaseModel):
    Ar_e_Ventilação: List[ArEVentilaO] = Field(
        ..., alias='Ar e Ventilação', description=''
    )


class UsingFieldsAll(BaseModel):
    accountId: str
    accountName: str
    dataEntityId: str
    id: str


class ValidatedocumentbyclustersRequest(BaseModel):
    name: str
    rule: str


class CreateUpdateAddressRequests(BaseModel):
    addressName: Optional[str] = Field(
        None, description='Address name.', examples=['My house']
    )
    addressType: Optional[str] = Field(
        None,
        description='Type of address. For example, `Residential` or `Pickup`, among others.',
        examples=['residential'],
    )
    city: Optional[str] = Field(
        None, description='City of the shipping address.', examples=['Rio de Janeiro']
    )
    complement: Optional[str] = Field(
        None,
        description='Complement to the shipping address in case it applies.',
        examples=['3rd floor'],
    )
    country: Optional[str] = Field(
        None,
        description='Three letter ISO code of the country of the shipping address.',
        examples=['BRA'],
    )
    neighborhood: Optional[str] = Field(
        None, description='Neighborhood of the address.', examples=['Botafogo']
    )
    number: Optional[str] = Field(
        None,
        description='Number of the building, house or apartment in the shipping address.',
        examples=['300'],
    )
    postalCode: Optional[str] = Field(
        None, description='Postal Code.', examples=['12345-000']
    )
    receiverName: Optional[str] = Field(
        None,
        description='Name of the person who is going to receive the order.',
        examples=['Clark Kent.'],
    )
    reference: Optional[str] = Field(
        None,
        description='Complement that might help locate the shipping address more precisely in case of delivery.',
        examples=['Grey building'],
    )
    state: Optional[str] = Field(
        None, description='State of the shipping address.', examples=['Rio de Janeiro']
    )
    street: Optional[str] = Field(
        None, description='Street of the address.', examples=['Praia de Botafogo']
    )
    userId: Optional[str] = Field(
        None,
        description='ID of the customer to whom the address belongs.',
        examples=['7e03m794-a33a-11e9-84rt6-0adfa64s5a8e'],
    )


class CreateUpdateProfileRequests(BaseModel):
    document: Optional[str] = Field(
        None, description='Client document.', examples=['12345678900']
    )
    documentType: Optional[str] = Field(
        None, description='Client document type.', examples=['CPF']
    )
    email: Optional[str] = Field(
        None,
        description='Client email address.',
        examples=['clark.kent@examplemail.com'],
    )
    firstName: Optional[str] = Field(
        None, description='Client first name.', examples=['Clark']
    )
    isCorporate: Optional[bool] = Field(
        None, description='Indicates whether client is corporate.', examples=[False]
    )
    isNewsletterOptIn: Optional[bool] = Field(
        None,
        description='Indicates whether client otped to receive the store newsletter.',
        examples=[False],
    )
    lastName: Optional[str] = Field(
        None, description='Client last name.', examples=['Kent']
    )
    localeDefault: Optional[str] = Field(
        None,
        description='Default locale, used to set store language and currency, for example.',
        examples=['en-US'],
    )
    phone: Optional[str] = Field(
        None, description='Client telephone number.', examples=['+12025550195']
    )


class DocumentResponse(BaseModel):
    Href: str = Field(..., description='Document reference URL.')
    Id: str = Field(..., description='ID of the document that was created or updated.')


class ApiDataentitiesDataEntityNameDocumentsIdVersionsGetResponse(
    RootModel[List[Listversion]]
):
    root: List[Listversion]


class DepartmentVisitedTag(BaseModel):
    DisplayValue: str
    Scores_1: Scores = Field(..., alias='Scores')


class Document(BaseModel):
    accountId: str
    accountName: str
    carttag: str
    checkouttag: str
    dataEntityId: str
    departmentVisitedTag: DepartmentVisitedTag
    email: str
    followers: List[str] = Field(..., description='')
    id: str
    rclastsession: str
    rclastsessiondate: str


class Getversion(BaseModel):
    author: str
    document: Document
    id: str
